   
- name: Query sqlserver information
  community.general.mssql_script:
    login_user: "{{ item.username }}"
    login_password: "{{ item.password }}"
    login_host: "{{ item.hostname }}"
    login_port: "{{ item.port }}"
    name: master
    script: |
      SELECT 'mssqlserver' as dbtype,@@SERVERNAME as hostname,left(@@VERSION,200) as Version,CONVERT(VARCHAR,SERVERPROPERTY('productversion')) AS ProductVersion,CONVERT(VARCHAR,SERVERPROPERTY ('productlevel')) AS ProductLevel,CONVERT(VARCHAR(100),SERVERPROPERTY ('edition')) AS Edition, CONVERT(DECIMAL(10,2),(SUM(size * 8.00) / 1024.00 / 1024.00)) As UsedSpace, (SELECT CAST(COUNT(*) AS VARCHAR(10)) FROM sys.dm_os_schedulers WHERE status = 'VISIBLE ONLINE') as vCPU, (SELECT (committed_target_kb/1024) FROM sys.dm_os_sys_info) as AllocatedMemory,(SELECT (total_physical_memory_kb/1024) AS Total_OS_Memory_MB FROM sys.dm_os_sys_memory) as OSMemory, CONVERT(VARCHAR,CONNECTIONPROPERTY('local_net_address')) AS local_net_address, CONVERT(VARCHAR,CONNECTIONPROPERTY('local_tcp_port')) AS local_tcp_port, CURRENT_TIMESTAMP as CurTime FROM master.sys.master_files
  register: sqlserver_info
  ignore_errors: true

- name: record sqlserver info
  block:
    - name: sqlserver_info
      debug:
        msg: '{{ sqlserver_info }}'

    - name: update sqlserver query info
      set_fact:
        db_info: '{{ sqlserver_info.query_results[0][0][0] }}'

    - name: Record sqlserver information
      community.mysql.mysql_query:
        login_host: '{{ mysql_host }}'
        login_db: '{{ mysql_db }}'
        login_port: '{{ mysql_port }}'
        login_user: '{{ mysql_user }}'
        login_password: '{{ mysql_password }}'
        query:
        - INSERT INTO dbinventory (db,hostname,version,productversion,productlevel,edition,size,vcpu,allocatedmemory,osmemory,ipaddress,port,recordtime) VALUES (%(db_val)s,%(hostname_val)s ,%(version_val)s,%(productversion_val)s,%(productlevel_val)s,%(edition_val)s,%(size_val)s,%(vcpu_val)s,%(allocatedmemory_val)s,%(osmemory_val)s,%(ipaddress_val)s,%(port_val)s,%(recordtime_val)s)
        named_args:
          db_val: '{{ db_info[0] }}'
          hostname_val: '{{ db_info[1] }}'
          version_val: '{{ db_info[2] }}'
          productversion_val: '{{ db_info[3] }}'
          productlevel_val: '{{ db_info[4] }}'
          edition_val: '{{ db_info[5] }}'
          size_val: '{{ db_info[6] }}'
          vcpu_val: '{{ db_info[7] }}'
          allocatedmemory_val: '{{ db_info[8] }}'
          osmemory_val: '{{ db_info[9] }}'
          ipaddress_val: '{{ db_info[10] }}'
          port_val: '{{ db_info[11] }}'
          recordtime_val: '{{ db_info[12] }}'
        single_transaction: true
      register: update_result

    - name: update sqlserver query status
      set_fact:
        resultA: 'Retrieve SQL server information {{ item.hostname }} with port {{ item.port }} successful.'

    - name: append status to sqlserver_query_results
      set_fact:
        sqlserver_query_results: '{{ sqlserver_query_results + [ resultA ] }}'

  when: sqlserver_info is not failed

- name: sqlserver_info retrieve failed
  set_fact:
    resultB: 'Retrieve SQL server information {{ item.hostname }} with port {{ item.port }} failed. {{ sqlserver_info.msg }}'
  when: sqlserver_info is failed

- name: append status to sqlserver_query_results
  set_fact:
    sqlserver_query_results: '{{ sqlserver_query_results + [ resultB ] }}'
  when: sqlserver_info is failed

- name: sqlserver_info results
  debug:
    msg: '{{ sqlserver_query_results }}'
